const express = require('express');
const path = require('path');
const fs = require('fs').promises;
const app = express();

// Middleware
app.use(express.static('public'));
app.use(express.json());

// Ensure our data directories exist
async function ensureDirectories() {
    await fs.mkdir(path.join(__dirname, 'data'), { recursive: true });
    await fs.mkdir(path.join(__dirname, 'projects'), { recursive: true });
}

// Project templates
const templates = {
    react: {
        files: {
            'index.html': `
<!DOCTYPE html>
<html>
<head>
    <title>React App</title>
    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/babel-standalone@6.26.0/babel.min.js"></script>
</head>
<body>
    <div id="root"></div>
    <script type="text/babel" src="app.js"></script>
</body>
</html>`,
            'app.js': `
function App() {
    return (
        <div>
            <h1>Hello React!</h1>
        </div>
    );
}

ReactDOM.render(<App />, document.getElementById('root'));`
        }
    },
    static: {
        files: {
            'index.html': `
<!DOCTYPE html>
<html>
<head>
    <title>Static Site</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>Hello World!</h1>
    <script src="script.js"></script>
</body>
</html>`,
            'style.css': `
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
}`,
            'script.js': `console.log('Hello from JavaScript!');`
        }
    }
};

// API Routes
app.post('/api/projects', async (req, res) => {
    try {
        const { name, type } = req.body;
        const template = templates[type] || templates.static;
        
        // Create project directory
        const projectDir = path.join(__dirname, 'projects', name);
        await fs.mkdir(projectDir, { recursive: true });

        // Create project files
        for (const [filename, content] of Object.entries(template.files)) {
            await fs.writeFile(
                path.join(projectDir, filename),
                content.trim()
            );
        }

        // Save project metadata
        const projectData = {
            id: Date.now(),
            name,
            type,
            created: new Date().toISOString(),
            files: Object.keys(template.files)
        };

        await fs.writeFile(
            path.join(__dirname, 'data', `${projectData.id}.json`),
            JSON.stringify(projectData, null, 2)
        );

        res.json(projectData);
    } catch (error) {
        console.error('Error creating project:', error);
        res.status(500).json({ error: 'Failed to create project' });
    }
});

app.get('/api/projects', async (req, res) => {
    try {
        const dataDir = path.join(__dirname, 'data');
        const files = await fs.readdir(dataDir);
        const projects = await Promise.all(
            files.map(async file => {
                const content = await fs.readFile(path.join(dataDir, file), 'utf8');
                return JSON.parse(content);
            })
        );
        res.json(projects.sort((a, b) => b.id - a.id));
    } catch (error) {
        console.error('Error fetching projects:', error);
        res.status(500).json({ error: 'Failed to fetch projects' });
    }
});

app.get('/api/projects/:id/files/:filename', async (req, res) => {
    try {
        const { id, filename } = req.params;
        const projectData = JSON.parse(
            await fs.readFile(path.join(__dirname, 'data', `${id}.json`), 'utf8')
        );
        const content = await fs.readFile(
            path.join(__dirname, 'projects', projectData.name, filename),
            'utf8'
        );
        res.json({ content });
    } catch (error) {
        res.status(500).json({ error: 'Failed to fetch file' });
    }
});

app.put('/api/projects/:id/files/:filename', async (req, res) => {
    try {
        const { id, filename } = req.params;
        const { content } = req.body;
        const projectData = JSON.parse(
            await fs.readFile(path.join(__dirname, 'data', `${id}.json`), 'utf8')
        );
        
        await fs.writeFile(
            path.join(__dirname, 'projects', projectData.name, filename),
            content
        );
        
        res.json({ success: true });
    } catch (error) {
        res.status(500).json({ error: 'Failed to update file' });
    }
});

// Initialize and start server
async function start() {
    await ensureDirectories();
    const port = process.env.PORT || 3000;
    app.listen(port, () => {
        console.log(`Server running on port ${port}`);
    });
}

start().catch(console.error);
